import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
THREAD_ID = int(os.getenv("THREAD_ID", 0)) or None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_data = {}

QUESTIONS = [
    "1Ô∏è‚É£ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:",
    "2Ô∏è‚É£ –í–∞—à Telegram –Ω–∏–∫–Ω–µ–π–º (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π @username):",
    "3Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–∏–º–µ—Ä: –ª–∏—Ü–æ –∏ –Ω–∏–∫ –≤–∏–¥–Ω—ã):",
    "4Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≤–∞—à–µ–≥–æ –∫—Ä—É–≥–∞:",
    "5Ô∏è‚É£ –í –∫–∞–∫–∏—Ö –≥–∏–ª—å–¥–∏—è—Ö —Ä–∞–Ω–µ–µ —Å–æ—Å—Ç–æ—è–ª–∏?",
    "6Ô∏è‚É£ –ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞ –∏–∑ –≥–∏–ª—å–¥–∏–∏?",
    "7Ô∏è‚É£ –ü–æ—á–µ–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –∫–ª–∞–Ω?"
]

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏—ë–º–∫—É WinxClub!\n–û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    user_data[message.from_user.id] = {"step": 0, "answers": []}
    await message.answer(QUESTIONS[0])

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    data = user_data[user_id]
    step = data["step"]

    if message.photo:
        file_id = message.photo[-1].file_id
        data["answers"].append(("photo", file_id))
    else:
        data["answers"].append(("text", message.text))

    data["step"] += 1

    if data["step"] < len(QUESTIONS):
        await message.answer(QUESTIONS[data["step"]])
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∫–ª–∏–∫, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –æ—Ñ–∏—Ü–µ—Ä–æ–≤ –≥–∏–ª—å–¥–∏–∏.")
        await send_results_to_group(message.from_user, data["answers"])
        del user_data[user_id]

async def send_results_to_group(user, answers):
    text_parts = [
        f"üì• **–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {user.full_name} (@{user.username})**",
        "",
        f"1. –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: {answers[0][1] if answers[0][0]=='text' else '[—Å–∫—Ä–∏–Ω –ø—Ä–∏—Å–ª–∞–Ω]'}",
        f"2. Telegram: {answers[1][1] if answers[1][0]=='text' else '[—Å–∫—Ä–∏–Ω –ø—Ä–∏—Å–ª–∞–Ω]'}",
        f"5. –ì–∏–ª—å–¥–∏–∏ —Ä–∞–Ω–µ–µ: {answers[4][1] if len(answers)>4 and answers[4][0]=='text' else '[–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö]'}",
        f"6. –ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞: {answers[5][1] if len(answers)>5 and answers[5][0]=='text' else '[–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö]'}",
        f"7. –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å: {answers[6][1] if len(answers)>6 and answers[6][0]=='text' else '[–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö]'}",
    ]
    text_message = "\n".join(text_parts)

    await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=text_message,
        message_thread_id=THREAD_ID,
        parse_mode="Markdown"
    )

    captions = ["–°–∫—Ä–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "–°–∫—Ä–∏–Ω –∫—Ä—É–≥–∞"]

for idx, i in enumerate([2, 3]):  # –æ—Ç–≤–µ—Ç—ã —Å —Ñ–æ—Ç–æ ‚Äî 3-–π –∏ 4-–π –≤–æ–ø—Ä–æ—Å
    if len(answers) > i and answers[i][0] == "photo":
        await bot.send_photo(
            chat_id=GROUP_CHAT_ID,
            photo=answers[i][1],
            caption=captions[idx],
            message_thread_id=THREAD_ID
        )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
